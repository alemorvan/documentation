# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-16 15:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../src/docs/books/admin_guide/04-advanced-commands.md:43
#: ../src/docs/books/admin_guide/04-advanced-commands.md:220
#: ../src/docs/books/admin_guide/04-advanced-commands.md:271
#: ../src/docs/books/admin_guide/04-advanced-commands.md:334
#: ../src/docs/books/admin_guide/05-vi.md:70
#: ../src/docs/books/admin_guide/05-vi.md:206
#: ../src/docs/books/admin_guide/05-vi.md:272
#: ../src/docs/books/admin_guide/06-users.md:36
#: ../src/docs/books/admin_guide/06-users.md:92
#: ../src/docs/books/admin_guide/06-users.md:220
#: ../src/docs/books/admin_guide/06-users.md:350
#: ../src/docs/books/admin_guide/06-users.md:598
#: ../src/docs/books/admin_guide/06-users.md:754
#: ../src/docs/books/admin_guide/06-users.md:818
#: ../src/docs/books/admin_guide/11-tasks.md:174
#: ../src/docs/books/admin_guide/12-network.md:158
#: ../src/docs/books/admin_guide/03-commands.md:516
#: ../src/docs/books/admin_guide/03-commands.md:693
#: ../src/docs/books/admin_guide/03-commands.md:1216
#: ../src/docs/books/admin_guide/03-commands.md:1262
#: ../src/docs/books/admin_guide/03-commands.md:1297
#: ../src/docs/books/admin_guide/07-file-systems.md:395
#: ../src/docs/books/admin_guide/07-file-systems.md:437
#: ../src/docs/books/admin_guide/07-file-systems.md:447
#: ../src/docs/books/admin_guide/07-file-systems.md:515
#: ../src/docs/books/admin_guide/07-file-systems.md:556
#: ../src/docs/books/admin_guide/07-file-systems.md:627
#: ../src/docs/books/admin_guide/07-file-systems.md:653
#: ../src/docs/books/admin_guide/07-file-systems.md:672
#: ../src/docs/books/admin_guide/07-file-systems.md:676
#: ../src/docs/books/admin_guide/07-file-systems.md:1019
#: ../src/docs/books/admin_guide/08-process.md:49
#: ../src/docs/books/admin_guide/08-process.md:238
#: ../src/docs/books/admin_guide/09-backups.md:27
#: ../src/docs/books/admin_guide/09-backups.md:116
#: ../src/docs/books/admin_guide/09-backups.md:133
#: ../src/docs/books/admin_guide/09-backups.md:148
#: ../src/docs/books/admin_guide/09-backups.md:281
#: ../src/docs/books/admin_guide/09-backups.md:285
#: ../src/docs/books/admin_guide/09-backups.md:301
#: ../src/docs/books/admin_guide/09-backups.md:342
#: ../src/docs/books/admin_guide/09-backups.md:352
#: ../src/docs/books/admin_guide/09-backups.md:554
#: ../src/docs/books/admin_guide/09-backups.md:771
#: ../src/docs/books/admin_guide/10-boot.md:114
#: ../src/docs/books/admin_guide/10-boot.md:153
#: ../src/docs/books/admin_guide/10-boot.md:165
#: ../src/docs/books/admin_guide/13-softwares.md:22
#: ../src/docs/books/learning_ansible/01-basic.md:51
#: ../src/docs/books/learning_ansible/01-basic.md:104
#: ../src/docs/books/learning_ansible/01-basic.md:112
#: ../src/docs/books/learning_ansible/01-basic.md:328
#: ../src/docs/books/learning_ansible/01-basic.md:415
#: ../src/docs/books/learning_ansible/01-basic.md:492
#: ../src/docs/books/learning_ansible/01-basic.md:633
#: ../src/docs/books/learning_ansible/01-basic.md:656
#: ../src/docs/books/learning_ansible/02-advanced.md:34
#: ../src/docs/books/learning_ansible/02-advanced.md:150
#: ../src/docs/books/learning_ansible/02-advanced.md:182
#: ../src/docs/books/learning_ansible/02-advanced.md:269
#: ../src/docs/books/learning_ansible/02-advanced.md:277
#: ../src/docs/books/learning_ansible/02-advanced.md:287
#: ../src/docs/books/learning_ansible/02-advanced.md:293
#: ../src/docs/books/learning_ansible/02-advanced.md:360
#: ../src/docs/books/learning_ansible/02-advanced.md:428
#: ../src/docs/books/learning_ansible/02-advanced.md:601
#: ../src/docs/books/learning_ansible/03-working-with-files.md:33
#: ../src/docs/books/learning_ansible/03-working-with-files.md:58
#: ../src/docs/books/learning_ansible/03-working-with-files.md:77
#: ../src/docs/books/learning_ansible/03-working-with-files.md:96
#: ../src/docs/books/learning_ansible/03-working-with-files.md:113
#: ../src/docs/books/learning_ansible/04-ansible-galaxy.md:65
#: ../src/docs/books/learning_ansible/04-ansible-galaxy.md:432
#: ../src/docs/books/learning_ansible/05-deployments.md:41
#: ../src/docs/books/learning_ansible/05-deployments.md:124
#: ../src/docs/books/learning_ansible/05-deployments.md:196
#: ../src/docs/books/learning_ansible/05-deployments.md:616
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:36
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:40
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:80
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:214
#: ../src/docs/books/learning_ansible/07-working-with-filters.md:32
#: ../src/docs/books/learning_ansible/07-working-with-filters.md:75
#: ../src/docs/books/learning_bash/02-using-variables.md:153
#: ../src/docs/books/learning_bash/02-using-variables.md:193
#: ../src/docs/books/learning_bash/05-tests.md:245
#: ../src/docs/books/learning_bash/07-loops.md:180
#: ../src/docs/books/lxd_server/04-firewall.md:80
#: ../src/docs/books/nvchad/plugins/md_preview.md:140
#: ../src/docs/books/nvchad/template_chadrc.md:239
#: ../src/docs/gemstones/https_rsa_keygen.md:34
#: ../src/docs/gemstones/systemd_service_for_python_script.md:80
#: ../src/docs/guides/8_6_installation.md:37
#: ../src/docs/guides/8_6_installation.md:168
#: ../src/docs/guides/8_6_installation.md:176
#: ../src/docs/guides/8_6_installation.md:182
#: ../src/docs/guides/8_6_installation.md:250
#: ../src/docs/guides/automation/olivetin.md:60
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:307
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:323
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:486
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:533
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:667
#: ../src/docs/guides/containers/lxd_web_servers.md:35
#: ../src/docs/guides/containers/lxd_web_servers.md:45
#: ../src/docs/guides/containers/lxd_web_servers.md:301
#: ../src/docs/guides/containers/lxd_web_servers.md:352
#: ../src/docs/guides/containers/lxd_web_servers.md:605
#: ../src/docs/guides/containers/lxd_web_servers.md:665
#: ../src/docs/guides/containers/lxd_web_servers.md:737
#: ../src/docs/guides/containers/lxd_web_servers.md:796
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:53
#: ../src/docs/guides/contribute/navigation.md:60
#: ../src/docs/guides/custom-linux-kernel.md:453
#: ../src/docs/guides/editors/micro.md:30
#: ../src/docs/guides/file_sharing/glusterfs.md:46
#: ../src/docs/guides/file_sharing/glusterfs.md:64
#: ../src/docs/guides/file_sharing/glusterfs.md:102
#: ../src/docs/guides/file_sharing/glusterfs.md:203
#: ../src/docs/guides/installation.md:36 ../src/docs/guides/installation.md:175
#: ../src/docs/guides/installation.md:183
#: ../src/docs/guides/installation.md:193
#: ../src/docs/guides/installation.md:266
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:71
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:31
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:253
#: ../src/docs/guides/security/firewalld-beginners.md:89
#: ../src/docs/guides/security/firewalld-beginners.md:144
#: ../src/docs/guides/security/firewalld-beginners.md:258
#: ../src/docs/guides/security/firewalld.md:51
#: ../src/docs/guides/security/firewalld.md:94
#: ../src/docs/guides/security/firewalld.md:228
#: ../src/docs/guides/security/firewalld.md:372
#: ../src/docs/guides/security/generating_ssl_keys_lets_encrypt.md:72
#: ../src/docs/guides/security/learning_selinux.md:137
#: ../src/docs/guides/security/learning_selinux.md:253
#: ../src/docs/guides/security/learning_selinux.md:356
#: ../src/docs/guides/virtualization/vbox-rocky.md:27
#: ../src/docs/guides/web/nginx-mainline.md:30
#: ../src/docs/guides/web/nginx-mainline.md:99
#: ../src/docs/guides/web/nginx-mainline.md:141
#: ../src/docs/guides/web/nginx-mainline.md:254
#: ../src/docs/guides/web/nginx-mainline.md:333
#: ../src/docs/guides/web/nginx-multisite.md:73
#: ../src/docs/guides/web/nginx-multisite.md:233
#: ../src/docs/guides/web/nginx-multisite.md:292
#: ../src/docs/guides/web/nginx-multisite.md:302
#: ../src/docs/guides/web/php.md:33 ../src/docs/guides/web/php.md:76
#: ../src/docs/guides/web/php.md:181 ../src/docs/guides/web/php.md:230
#: ../src/docs/guides/web/php.md:271 ../src/docs/guides/web/php.md:467
#: ../src/docs/guides/web/php.md:471 ../src/docs/release_notes/9_2.md:26
#, no-wrap
msgid "!!! Note\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/admin_guide/13-softwares.md:900
#: ../src/docs/books/nvchad/nvchad_ui/nvimtree.md:105
#: ../src/docs/books/nvchad/template_chadrc.md:352
#: ../src/docs/gemstones/bash_stub.md:103
#: ../src/docs/gemstones/perl_search_replace.md:38
#: ../src/docs/gemstones/sed_search_replace.md:72
#: ../src/docs/gemstones/systemd_service_for_python_script.md:172
#: ../src/docs/guides/automation/olivetin.md:142
#: ../src/docs/guides/cms/dokuwiki_server.md:306
#: ../src/docs/guides/communications/asterisk_installation.md:261
#: ../src/docs/guides/containers/lxd_web_servers.md:919
#: ../src/docs/guides/containers/podman-nextcloud.md:456
#: ../src/docs/guides/contribute/local_docs.md:47
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:322
#: ../src/docs/guides/contribute/navigation.md:129
#: ../src/docs/guides/contribute/rockydocs_formatting.md:458
#: ../src/docs/guides/database/database_mariadb-server.md:197
#: ../src/docs/guides/desktop/kde_installation.md:105
#: ../src/docs/guides/desktop/mate_installation.md:200
#: ../src/docs/guides/desktop/xfce_installation.md:218
#: ../src/docs/guides/editors/micro.md:79
#: ../src/docs/guides/email/postfix_reporting.md:254
#: ../src/docs/guides/file_sharing/secure_ftp_server_vsftpd.md:270
#: ../src/docs/guides/file_sharing/sftp.md:765
#: ../src/docs/guides/proxies/pound.md:460
#: ../src/docs/guides/security/dnf_automatic.md:119
#: ../src/docs/guides/security/enabling_iptables_firewall.md:54
#: ../src/docs/guides/security/firewalld-beginners.md:427
#: ../src/docs/guides/security/firewalld.md:477
#: ../src/docs/guides/security/pam.md:137
#: ../src/docs/guides/security/ssl_keys_https.md:136
#: ../src/docs/guides/virtualization/vbox-rocky.md:160
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:147
#: ../src/docs/guides/web/apache_hardened_webserver/modsecurity.md:235
#: ../src/docs/guides/web/apache_hardened_webserver/ossec-hids.md:157
#: ../src/docs/guides/web/apache_hardened_webserver/rkhunter.md:91
#: ../src/docs/guides/web/mod_SSL_apache.md:171
#: ../src/docs/guides/web/nginx-mainline.md:352
#: ../src/docs/guides/web/nginx-multisite.md:359
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Title #
#: ../src/docs/books/disa_stig/disa_stig_part2.md:13
#: ../src/docs/books/disa_stig/disa_stig_part1.md:23
#: ../src/docs/books/learning_ansible/05-deployments.md:31
#: ../src/docs/books/learning_bash/appendix/02-variables-logs.md:14
#: ../src/docs/books/lxd_server/00-toc.md:1
#: ../src/docs/books/lxd_server/00-toc.md:13
#: ../src/docs/books/nvchad/index.md:12
#: ../src/docs/books/nvchad/plugins/index.md:14
#: ../src/docs/books/nvchad/plugins/md_preview.md:14
#: ../src/docs/books/nvchad/plugins/projectmgr.md:14
#: ../src/docs/books/nvchad/vale_nvchad.md:12
#: ../src/docs/gemstones/dnf-swap.md:18 ../src/docs/gemstones/docker.md:10
#: ../src/docs/gemstones/nmtui.md:8 ../src/docs/gemstones/setup_local_repo.md:8
#: ../src/docs/gemstones/string_color.md:11
#: ../src/docs/guides/automation/cron_jobs_howto.md:25
#: ../src/docs/guides/automation/olivetin.md:14
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:25
#: ../src/docs/guides/backup/mirroring_lsyncd.md:26
#: ../src/docs/guides/backup/rsnapshot_backup.md:22
#: ../src/docs/guides/backup/rsync_ssh.md:24
#: ../src/docs/guides/cms/cloud_server_using_nextcloud.md:28
#: ../src/docs/guides/cms/dokuwiki_server.md:23
#: ../src/docs/guides/containers/lxd_web_servers.md:10
#: ../src/docs/guides/containers/podman-nextcloud.md:13
#: ../src/docs/guides/contribute/local_docs.md:11
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:11
#: ../src/docs/guides/contribute/mkdocs_venv.md:14
#: ../src/docs/guides/contribute/style_guide.md:14
#: ../src/docs/guides/database/database_mariadb-server.md:21
#: ../src/docs/guides/desktop/kde_installation.md:11
#: ../src/docs/guides/dns/private_dns_server_using_bind.md:22
#: ../src/docs/guides/editors/micro.md:14
#: ../src/docs/guides/email/postfix_reporting.md:22
#: ../src/docs/guides/file_sharing/glusterfs.md:16
#: ../src/docs/guides/file_sharing/secure_ftp_server_vsftpd.md:21
#: ../src/docs/guides/file_sharing/sftp.md:16
#: ../src/docs/guides/migrate2rocky.md:18
#: ../src/docs/guides/network/basic_network_configuration.md:12
#: ../src/docs/guides/network/librenms_monitoring_server.md:13
#: ../src/docs/guides/package_management/index.md:1
#: ../src/docs/guides/package_management/index.md:5
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:9
#: ../src/docs/guides/proxies/pound.md:17
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:13
#: ../src/docs/guides/security/enabling_iptables_firewall.md:22
#: ../src/docs/guides/security/firewalld-beginners.md:10
#: ../src/docs/guides/security/generating_ssl_keys_lets_encrypt.md:23
#: ../src/docs/guides/security/ssh_public_private_keys.md:21
#: ../src/docs/guides/security/ssl_keys_https.md:22
#: ../src/docs/guides/virtualization/vbox-rocky.md:13
#: ../src/docs/guides/web/apache-sites-enabled.md:25
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:23
#: ../src/docs/guides/web/apache_hardened_webserver/modsecurity.md:24
#: ../src/docs/guides/web/apache_hardened_webserver/ossec-hids.md:22
#: ../src/docs/guides/web/apache_hardened_webserver/rkhunter.md:23
#: ../src/docs/guides/web/nginx-mainline.md:13
#: ../src/docs/guides/web/nginx-multisite.md:14
#: ../src/docs/labs/security/introduction.md:1
#: ../src/docs/labs/security/introduction.md:5
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/guides/automation/olivetin.md:1
#: ../src/docs/guides/file_sharing/sftp.md:1
#: ../src/docs/guides/web/apache-sites-enabled.md:1
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:1
#: ../src/docs/guides/web/apache_hardened_webserver/modsecurity.md:1
#: ../src/docs/guides/web/apache_hardened_webserver/ossec-hids.md:1
#: ../src/docs/guides/web/nginx-mainline.md:1
#: ../src/docs/guides/web/nginx-multisite.md:1 ../src/docs/guides/web/php.md:1
#, no-wrap
msgid "web"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/containers/lxd_web_servers.md:252
#: ../src/docs/guides/web/nginx-mainline.md:113
#, no-wrap
msgid "Let’s break this down:\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/containers/lxd_web_servers.md:256
#: ../src/docs/guides/web/nginx-mainline.md:117
#, no-wrap
msgid "The `-–permanent` flag tells the firewall to make sure this configuration is used every time the firewall is restarted, and when the server itself is restarted.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/containers/lxd_web_servers.md:256
#: ../src/docs/guides/web/nginx-mainline.md:117
#, no-wrap
msgid "`–-zone=public` tells the firewall to take incoming connections to this port from everyone.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/containers/lxd_web_servers.md:295
#: ../src/docs/guides/web/nginx-mainline.md:168
#, no-wrap
msgid "And that should be everything you need, firewall-wise.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/containers/lxd_web_servers.md:635
#: ../src/docs/guides/web/nginx-mainline.md:308
#, no-wrap
msgid "That should get you a list that looks like this:\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/containers/podman-nextcloud.md:35
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:19
#: ../src/docs/guides/dns/private_dns_server_using_bind.md:13
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:19
#: ../src/docs/guides/proxies/pound.md:27
#: ../src/docs/guides/security/firewalld-beginners.md:36
#: ../src/docs/guides/security/firewalld.md:25
#: ../src/docs/guides/security/pam.md:13
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:14
#: ../src/docs/guides/web/nginx-mainline.md:41
#: ../src/docs/guides/web/nginx-multisite.md:28
#, no-wrap
msgid "Prerequisites and Assumptions"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/security/learning_selinux.md:234
#: ../src/docs/guides/web/nginx-mainline.md:342
#, no-wrap
msgid "sudo setenforce 0\n"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/guides/web/apache_hardened_webserver/modsecurity.md:1
#: ../src/docs/guides/web/nginx-mainline.md:1
#: ../src/docs/guides/web/nginx-multisite.md:1
#, no-wrap
msgid "nginx"
msgstr ""

#. type: YAML Front Matter: contributors
#: ../src/docs/guides/web/nginx-mainline.md:1
#, no-wrap
msgid "Antoine Le Morvan, Steven Spencer"
msgstr ""

#. type: YAML Front Matter: title
#: ../src/docs/guides/web/nginx-mainline.md:1
#, no-wrap
msgid "Nginx"
msgstr ""

#. type: Title #
#: ../src/docs/guides/web/nginx-mainline.md:11
#, no-wrap
msgid "How to Install the Latest Nginx on Rocky Linux"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:16
#, no-wrap
msgid "*Nginx* is a web server designed to be fast, efficient, and compatible with just about anything you can imagine. I personally use it a fair bit and—once you get the hang of it—it’s actually pretty easy to set up and configure. To that end, I've written this beginner's guide.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:18
#, no-wrap
msgid "Here’s a short rundown of the ways Nginx stands out/features it has:\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "A basic web server (one would hope)\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "A reverse proxy for directing traffic to multiple sites\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "A built-in load balancer for managing traffic to multiple websites\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "Built-in file caching for speed\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "WebSockets\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "FastCGI support\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:26
#, no-wrap
msgid "And, of course, IPv6\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:28
#, no-wrap
msgid "It’s great! So just `sudo dnf install nginx`, right? Well, not exactly. We just have to enable the right module first, to enable the \"mainline\" branch, so you can have the latest version of Nginx.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:32
#, no-wrap
msgid "    There's another branch called \"stable\", but it's actually a little outdated for most use cases. It will receive no new features as they are developed, and only the most urgently-needed bug fixes and security upgrades.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:34
#, no-wrap
msgid "    The developers of Nginx consider the \"mainline\" branch to be well-tested and stable for general use, *as it gets all new features, all security fixes, and all bug fixes.*\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:38
#, no-wrap
msgid ""
"    The only reasons to use the \"stable\" branch include:\n"
"    * You *really* want to be sure that new features and big-fixes won't break any third-party code or custom code of your own.\n"
"    * You want to stick with the Rocky Linux software repositories only.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:40
#, no-wrap
msgid "    There will be a tutorial at the end of this guide detailing how to enable and install the \"stable\" branch with minimal fuss.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:44
#, no-wrap
msgid "You’ll need:\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:49
#, no-wrap
msgid "An internet-connected Rocky Linux machine or server.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:49
#, no-wrap
msgid "A basic familiarity with the command line.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:49
#, no-wrap
msgid "The ability to run commands as root, either as the root user or with `sudo`.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:49
#, no-wrap
msgid "A text editor of your choice, whether graphical or command-line based. For this tutorial, I’m using `nano`.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:50
#, no-wrap
msgid "Installing the Repository & Enabling the Module"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:53
#, no-wrap
msgid "First, make sure your machine is updated:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:54
#: ../src/docs/guides/web/nginx-mainline.md:297
#, no-wrap
msgid "sudo dnf update\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:59
#, no-wrap
msgid "Then, install the `epel-release` software repository:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:60
#, no-wrap
msgid "sudo dnf install epel-release\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:65
#, no-wrap
msgid "Then enable the right module for the latest version of `nginx`. This module will always be called `nginx:manline`, so just enable it with `dnf` like so:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:66
#, no-wrap
msgid "sudo dnf module enable nginx:mainline\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:71
#, no-wrap
msgid "It'll give you the usual \"Are you sure you want to do that?\", but this isn't 2nd Edition D&D with Gary Gygax himself, so yes. Of course you do. Hit <kbd>y</kbd> to confirm.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:72
#, no-wrap
msgid "Installing and Running Nginx"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:75
#, no-wrap
msgid "Then, install the package `nginx` from the previously added repository:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:76
#: ../src/docs/guides/web/nginx-mainline.md:326
#, no-wrap
msgid "sudo dnf install nginx\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:81
#, no-wrap
msgid "The terminal will ask you if you’re fine with installing the repository’s GPG key. You need that, so choose `Y` for yes.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:83
#, no-wrap
msgid "Once the installation is done, start the `nginx` service and enable it to automatically start on reboot all in one go with:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:84
#, no-wrap
msgid "sudo systemctl enable --now nginx\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:89
#, no-wrap
msgid "To verify that the lastest version of *Nginx* has been installed, run:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:90
#, no-wrap
msgid "nginx -v\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:95
#, no-wrap
msgid "From there, you could just start dropping HTML files into the `/usr/share/nginx/html/` directory to build a simple, static website. The configuration file for the default website/virtual host is called “nginx.conf” and it’s in `/etc/nginx/`. It also holds a number of other basic Nginx server configurations, so even if you choose to move the actual website config to another file, you should probably leave the rest of \"nginx.conf\" intact.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:96
#, no-wrap
msgid "Configuring the Firewall"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:101
#, no-wrap
msgid "    If you are installing Nginx on a container such as LXD/LXC or Docker, you can just skip this part for now. The firewall should be handled by the host OS.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:103
#, no-wrap
msgid "If you try to view a web page at your machine’s IP address or domain name from another computer, you’re probably going to get a big fat nothing. Well, that’ll be the case as long as you have a firewall up and running.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:105
#, no-wrap
msgid "To open up the necessary ports so that you can actually \"see\" your web pages, we will use Rocky Linux's build-in firewall, `firewalld`. The `firewalld` command for doing this is `firewall-cmd`. There are two ways to do it: the official way, and the manual way. *In this instance, the official way is best,* but you should know both for future reference.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:107
#, no-wrap
msgid "The official way opens up the firewall to the `http` service, which is of course the service that handles web pages. Just run this:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:108
#, no-wrap
msgid "sudo firewall-cmd --permanent --zone=public --add-service=http\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:117
#, no-wrap
msgid "Lastly, `--add-service=http` tells `firewalld` to let all HTTP traffic through to the server.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:119
#, no-wrap
msgid "Now here's the manual way to do it. It's pretty much the same, except you're specifically opening up port 80, which is what the HTTP uses.\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:120
#, no-wrap
msgid "sudo firewall-cmd --permanent --zone=public --add-port=80/tcp\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:125
#, no-wrap
msgid "`–-add-port=80/tcp` tells the firewall to accept incoming connections over port 80, as long as they’re using the Transmission Control Protocol, which is what you want in this case.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:127
#, no-wrap
msgid "To repeat the process for SSL/HTTPS traffic, just run the command again, and change the service and/or the port number.\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:128
#, no-wrap
msgid ""
"sudo firewall-cmd --permanent --zone=public --add-service=https\n"
"# Or, in some other cases:\n"
"sudo firewall-cmd --permanent --zone=public --add-port=443/tcp\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:135
#, no-wrap
msgid "These configurations won’t take effect until you force the issue. To do that, tell `firewalld` to relead its configurations, like so:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:136
#, no-wrap
msgid "sudo firewall-cmd --reload\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:143
#, no-wrap
msgid "    Now, there’s a very small chance that this won’t work. In those rare cases, make `firewalld` do your bidding with the old turn-it-off-and-turn-it-on-again.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:147
#, no-wrap
msgid ""
"    ```bash\n"
"    systemctl restart firewalld\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:149
#, no-wrap
msgid "To make sure the ports have been added properly, run `firewall-cmd --list-all`. A properly-configured firewall will look a bit like this:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:150
#, no-wrap
msgid ""
"public (active)\n"
"  target: default\n"
"  icmp-block-inversion: no\n"
"  interfaces: enp9s0\n"
"  sources:\n"
"  services: cockpit dhcpv6-client ssh http https\n"
"  ports:\n"
"  protocols:\n"
"  forward: no\n"
"  masquerade: no\n"
"  forward-ports:\n"
"  source-ports:\n"
"  icmp-blocks:\n"
"  rich rules:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:170
#, no-wrap
msgid "*Now* you should be able to see a web page that looks something like this:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:172
#, no-wrap
msgid "![The Nginx welcome page](nginx/images/welcome-nginx.png)\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:174
#, no-wrap
msgid "It’s not much at all, but it means the server is working. You can also test that your web page is working from the command line with:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:175
#, no-wrap
msgid "curl -I http://[your-ip-address]\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:179
#, no-wrap
msgid "Creating a Server User and Changing the Website Root Folder"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:182
#, no-wrap
msgid "While you *can* just drop your website into the default directory and go (and this might be fine for *Nginx* when it’s running inside a container, or on a test/development server), it’s not what we call best practice. Instead, it’s a good idea to create a specific Linux user on your system for your website, and put your website files in a directory made just for that user.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:184
#, no-wrap
msgid "If you want to build multiple websites, it’s actually a good idea to create multiple users and root directories, both for the sake of organization and the sake of security.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:186
#, no-wrap
msgid "In this guide, I’m going to have just the one user: a handsome devil named “www”. Deciding where to put your website files gets more complicated.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:188
#, no-wrap
msgid "Depending on your server setup, you can put your website files in a couple of different places. If you're on a bare-metal (physical) server, or you're installing `nginx` directly on a VPS, you probably have Security Enhanced Linux (SELinux) running. SELinux is a tool that does a lot to protect your machine, but it also kind of dictates where you can put certain things, like web pages.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:190
#, no-wrap
msgid "So if you're installing `nginx` directly to your machine, then you'll want to put your websites in subdirectories of the default root folder. In this case, the default root is `/usr/share/nginx/html`, so the website for the “www” user might go into `/usr/share/nginx/html/www`.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:192
#, no-wrap
msgid "If you're running `nginx` in a container such as LXD/LXC, however, SELinux will likely *not* be installed, and you can put your files wherever you like. In this case, I like to put all of a user's website files under a directory in a normal home folder, like so: `/home/www/`.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:194
#, no-wrap
msgid "I'll continue this guide as though SELinux is installed, though. Just change what you need to based on your use case. You can also learn more about how SELinux works in [our guide on the subject](../security/learning_selinux.md).\n"
msgstr ""

#. type: Title ###
#: ../src/docs/guides/web/nginx-mainline.md:195
#, no-wrap
msgid "Creating the User"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:198
#, no-wrap
msgid "First, we make the folder we’re going to use:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:199
#, no-wrap
msgid "sudo mkdir /usr/share/nginx/html/www\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:204
#, no-wrap
msgid "Next, create the www group:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:205
#, no-wrap
msgid "sudo groupadd www\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:209
#, no-wrap
msgid "Then, we create the user:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:210
#, no-wrap
msgid "sudo adduser -G nginx -g www -d /usr/share/nginx/html/www www --system --shell=/bin/false\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:215
#, no-wrap
msgid "That command tells the machine to:\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:221
#, no-wrap
msgid "Make a user called “www” (as per the middle bit of text),\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:221
#, no-wrap
msgid "put all of its files in `/usr/share/nginx/html/www`,\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:221
#, no-wrap
msgid "and add it to the following groups: “nginx” as supplemental , “www” as primary.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:221
#, no-wrap
msgid "The `--system` flag says that the user is not a human user, it's reserved for the system. If you want to create human user accounts to manage different websites, that's a whole other guide.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:221
#, no-wrap
msgid "`--shell=/bin/false` makes sure no one can even *try* to log in as the “www” user.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:223
#, no-wrap
msgid "The “nginx” group does some real magic. It allows the web server to read and modify files that belong to the “www” user, and the “www” user group. See the Rocky Linux [guide to user management](../../books/admin_guide/06-users.md) for more information.\n"
msgstr ""

#. type: Title ###
#: ../src/docs/guides/web/nginx-mainline.md:224
#, no-wrap
msgid "Changing the Server Root Folder"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:227
#, no-wrap
msgid "Now that you have your fancy new user account, it’s time to make `nginx` look for your website files in that folder. Grab your favorite text editor again.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:229
#, no-wrap
msgid "For now, just run:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:230
#, no-wrap
msgid "sudo nano /etc/nginx/conf.d/default.conf\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:235
#, no-wrap
msgid "When the file is open, look for the line that looks like `root   /usr/share/nginx/html;`. Change it to your chosen website root folder, eg. `root   /usr/share/nginx/html/www;` (or `/home/www` if you're running `nginx` in containers like I do). Save and close the file, then test your `nginx` configuration to make sure you didn’t skip a semi-colon or anything:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:236
#, no-wrap
msgid "nginx -t\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:241
#, no-wrap
msgid "If you get the following success message, everything went right:\n"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/web/nginx-mainline.md:242
#, no-wrap
msgid ""
"nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n"
"nginx: configuration file /etc/nginx/nginx.conf test is successful\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:248
#, no-wrap
msgid "Then, give the server a soft restart with:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:249
#, no-wrap
msgid "sudo systemctl reload nginx\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:256
#, no-wrap
msgid "    In the unlikely event that the soft restart doesn’t work, give `nginx` a kick in the pants with:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:260
#, no-wrap
msgid ""
"    ```bash\n"
"    sudo systemctl restart nginx\n"
"    ```\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:262
#, no-wrap
msgid "Any HTML files in your new root folder should now be browsable from… your browser.\n"
msgstr ""

#. type: Title ###
#: ../src/docs/guides/web/nginx-mainline.md:263
#, no-wrap
msgid "Changing File Permissions"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:266
#, no-wrap
msgid "To make sure that `nginx` can read, write to, and execute any files in the website directory, permissions need to be set properly.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:268
#, no-wrap
msgid "First, make sure that all files in the root folder are owned by the server user and its user group with:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:269
#, no-wrap
msgid "sudo chown -R www:www /usr/share/nginx/html/www\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:274
#, no-wrap
msgid "And then, to make sure that users who want to actually browse your website can actually see the pages, you should run these commands (and yes, those semicolons matter):\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:275
#, no-wrap
msgid ""
"sudo find /usr/share/nginx/html/www -type d -exec chmod 555 \"{}\" \\;\n"
"sudo find /usr/share/nginx/html/www -type f -exec chmod 444 \"{}\" \\;\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:281
#, no-wrap
msgid "That basically gives everyone the right to look at files on the server, but not modify them. Only the root and server users get to do that.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:282
#, no-wrap
msgid "Getting SSL Certificates for Your Site"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:285
#, no-wrap
msgid "As of now, our [guide to getting SSL certificates with certbot](../security/generating_ssl_keys_lets_encrypt.md) has been updated with some basic instructions for `nginx`. Go give that a look, as it has full instructions for installing certbot, as well as generating the certificates.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:287
#, no-wrap
msgid "The time is coming when browsers might just stop letting people see sites without certificates at all, so make sure you get one for every site.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:288
#, no-wrap
msgid "Additional Configuration Options and Guides"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:292
#, no-wrap
msgid "If you want to see how to make *Nginx* work with PHP, and PHP-FPM specifically, check out our [guide to PHP on Rocky Linux](../web/php.md).\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/web/nginx-mainline.md:292
#, no-wrap
msgid "If you want to learn how to set up *Nginx* for multiple websites, we now have [a guide on just that subject](nginx-multisite.md).\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:293
#, no-wrap
msgid "Installing the Stable Branch From Rocky's Own Repos"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:296
#, no-wrap
msgid "If you want to use the “stable” branch of `nginx`, even with its limitations, here's how you do it. First, make sure your OS is updated:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:302
#, no-wrap
msgid "Then, look for the latest `nginx` version available in the default repos with:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:303
#, no-wrap
msgid "sudo dnf module list nginx\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:309
#, no-wrap
msgid ""
"Rocky Linux 8 - AppStream\n"
"Name       Stream        Profiles        Summary\n"
"nginx      1.14 [d]      common [d]      nginx webserver\n"
"nginx      1.16          common [d]      nginx webserver\n"
"nginx      1.18          common [d]      nginx webserver\n"
"nginx      1.20          common [d]      nginx webserver\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:319
#, no-wrap
msgid "Choose the highest number on the list, and enable its module like so:\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:320
#, no-wrap
msgid "sudo dnf module enable nginx:1.20\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:325
#, no-wrap
msgid "You'll be asked if you're sure you want to do this, so just choose `Y` as usual. Then, use the default command to install `nginx`:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:331
#, no-wrap
msgid "Then you can enable the service and configure your server as detailed above.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:335
#, no-wrap
msgid "    The default configuration file, in this case, is in the base `nginx` configuration folder at `/etc/nginx/nginx.conf`. The root website folder is the same, though.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/web/nginx-mainline.md:336
#, no-wrap
msgid "SELinux rules"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:339
#, no-wrap
msgid "Beware that when enforced, nginx proxy_pass directives will fail with \"502 Bad Gateway\"\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:341
#, no-wrap
msgid "You can either disable setenforce for development purposes\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:347
#, no-wrap
msgid "or you can enable `http_d` or other services that related to nginx in `/var/log/audit/audit.log`\n"
msgstr ""

#. type: Fenced code block (bash)
#: ../src/docs/guides/web/nginx-mainline.md:348
#, no-wrap
msgid "sudo setsebool httpd_can_network_connect 1 -P\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:355
#, no-wrap
msgid "The basic installation and configuration of `nginx` are easy, even if it’s more complicated than it should be to get the latest version. But, just follow the steps, and you’ll have one of the best server options out there up and running quickly.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/web/nginx-mainline.md:356
#, no-wrap
msgid "Now you just have to go and build yourself a website? What could that take, another ten minutes? *Sobs quietly in Web Designer*\n"
msgstr ""
