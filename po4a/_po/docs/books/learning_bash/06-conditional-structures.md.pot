# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-11 15:28+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/06-conditional-structures.md:1
#, no-wrap
msgid "education"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/06-conditional-structures.md:1
#, no-wrap
msgid "bash scripting"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/06-conditional-structures.md:1
#, no-wrap
msgid "bash"
msgstr ""

#. type: Title #
#: ../src/docs/books/learning_bash/06-conditional-structures.md:1
#: ../src/docs/books/learning_bash/06-conditional-structures.md:12
#, no-wrap
msgid "Bash - Conditional structures if and case"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:17
#, no-wrap
msgid "**Objectives**: In this chapter you will learn how to:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:18
#, no-wrap
msgid ":heavy_check_mark: use the conditional syntax `if`;  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:19
#, no-wrap
msgid ":heavy_check_mark: use the conditional syntax `case`;  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:22
msgid ""
":checkered_flag: **linux**, **script**, **bash**, **conditional structures**"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:23
#, no-wrap
msgid "**Knowledge**: :star: :star:  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:24
#, no-wrap
msgid "**Complexity**: :star: :star: :star:  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:27
#, no-wrap
msgid "**Reading time**: 20 minutes\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/06-conditional-structures.md:30
#, no-wrap
msgid "Conditional structures"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:33
msgid ""
"If the `$?` variable is used to know the result of a test or the execution "
"of a command, it can only be displayed and has no effect on the execution of "
"a script."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:36
msgid ""
"But we can use it in a condition.  **If** the test is good **then** I do "
"this action **otherwise** I do this other action."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:38
msgid "Syntax of the conditional alternative `if`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:39
#, no-wrap
msgid ""
"if command\n"
"then\n"
"    command if $?=0\n"
"else\n"
"    command if $?!=0\n"
"fi\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:50
msgid ""
"The command placed after the word `if` can be any command since it is its "
"return code (`$?`) that will be evaluated.  It is often convenient to use "
"the `test` command to define several actions depending on the result of this "
"test (file exists, variable not empty, write rights set)."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:52
msgid ""
"Using a classical command (`mkdir`, `tar`, ...) allows you to define the "
"actions to be performed in case of success, or the error messages to be "
"displayed in case of failure."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:54
#: ../src/docs/books/learning_bash/06-conditional-structures.md:125
msgid "Examples:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:55
#, no-wrap
msgid ""
"if [[ -e /etc/passwd ]]\n"
"then\n"
"    echo \"The file exists\"\n"
"else\n"
"    echo \"The file does not exist\"\n"
"fi\n"
"\n"
"if mkdir rep\n"
"then\n"
"    cd rep\n"
"fi\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:70
msgid ""
"If the `else` block starts with a new `if` structure, you can merge the "
"`else` and `if` with `elif` as shown below:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:71
#, no-wrap
msgid ""
"[...]\n"
"else\n"
"  if [[ -e /etc/ ]]\n"
"[...]\n"
"\n"
"[...]\n"
"# is equivalent to\n"
"elif [[ -e /etc ]]\n"
"[...]\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:84
msgid "!!! Note \"Summary\""
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:86
#, no-wrap
msgid "    The structure `if` / `then` / `else` / `fi` evaluates the command placed after if:\n"
msgstr ""

#. type: Bullet: '    * '
#: ../src/docs/books/learning_bash/06-conditional-structures.md:89
msgid ""
"If the return code of this command is `0` (`true`) the shell will execute "
"the commands placed after `then`;"
msgstr ""

#. type: Bullet: '    * '
#: ../src/docs/books/learning_bash/06-conditional-structures.md:89
msgid ""
"If the return code is different from `0` (`false`) the shell will execute "
"the commands placed after `else`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:91
#, no-wrap
msgid "    The `else` block is optional.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:93
#, no-wrap
msgid "    There is often a need to perform some actions only if the evaluation of the command is true and to do nothing if it is false.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:95
#, no-wrap
msgid "    The word `fi` closes the structure.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:97
msgid ""
"When there is only one command to execute in the `then` block, it is "
"possible to use a simpler syntax."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:99
msgid ""
"The command to execute if `$?` is `true` is placed after `&&` while the "
"command to execute if `$?` is `false` is placed after `||` (optional)."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:101
msgid "Example:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:102
#, no-wrap
msgid ""
"[[ -e /etc/passwd ]] && echo \"The file exists\" || echo \"The file does not exist\"\n"
"mkdir dir && echo \"The directory is created\".\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:108
msgid ""
"It is also possible to evaluate and replace a variable with a lighter "
"structure than `if`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:110
msgid "This syntax implements the braces:"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:123
#, no-wrap
msgid ""
"* Displays a replacement value if the variable is empty:\n"
"    ```\n"
"    ${variable:-value}\n"
"    ```\n"
"* Displays a replacement value if the variable is not empty:\n"
"    ```\n"
"    ${variable:+value}\n"
"    ```\n"
"* Assigns a new value to the variable if it is empty:\n"
"    ```\n"
"    ${variable:=value}\n"
"    ```\n"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:126
#, no-wrap
msgid ""
"name=\"\"\n"
"echo ${name:-linux}\n"
"linux\n"
"echo $name\n"
"\n"
"echo ${name:=linux}\n"
"linux\n"
"echo $name\n"
"linux\n"
"echo ${name:+tux}\n"
"tux\n"
"echo $name\n"
"linux\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:143
msgid "!!! hint"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:145
#, no-wrap
msgid "    When deciding on the use of `if`, `then`, `else`, `fi` OR the use of the simpler syntax examples described, keep in mind the readability of your script. If no one is going to use the script but yourself, then you can use what works best for you. If someone else might need to review, debug, or trace through the script that you create, either use the more self documenting form (`if`,`then`, etc) or make sure that you document your script thoroughly so that the simpler syntax is actually understood by those who may need to modify and use the script. Documenting the script is *always* a good thing to do anyway, as noted several times earlier in these lessons.\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/06-conditional-structures.md:146
#, no-wrap
msgid "Alternative conditional: structure `case`"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:150
msgid ""
"A succession of `if` structures can quickly become heavy and complex. When "
"it concerns the evaluation of the same variable, it is possible to use a "
"conditional structure with several branches.  The values of the variable can "
"be specified or belong to a list of possibilities."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:152
#, no-wrap
msgid "**Wildcards can be used**.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:154
msgid ""
"The structure `case ... in` / `esac` evaluates the variable placed after "
"`case` and compares it with the defined values."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:156
msgid ""
"At the first equality found, the commands placed between `)` and `;;` are "
"executed."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:158
msgid ""
"The variable evaluated and the values proposed can be strings or results of "
"sub-executions of commands."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:160
msgid ""
"Placed at the end of the structure, the choice `*` indicates the actions to "
"be executed for all the values that have not been previously tested."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:162
msgid "Syntax of the conditional alternative case:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:163
#, no-wrap
msgid ""
"case $variable in\n"
"  value1)\n"
"    commands if $variable = value1\n"
"    ;;\n"
"  value2)\n"
"    commands if $variable = value2\n"
"    ;;\n"
"  [..]\n"
"  *)\n"
"    commands for all values of $variable != of value1 and value2\n"
"    ;;\n"
"esac\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:179
msgid ""
"When the value is subject to variation, it is advisable to use wildcards "
"`[]` to specify the possibilities:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:180
#, no-wrap
msgid ""
"[Yy][Ee][Ss])\n"
"  echo \"yes\"\n"
"  ;;\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/06-conditional-structures.md:187
msgid "The character `|` also allows you to specify a value or another:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/06-conditional-structures.md:188
#, no-wrap
msgid ""
"\"yes\" | \"YES\")\n"
"  echo \"yes\"\n"
"  ;;\n"
msgstr ""
