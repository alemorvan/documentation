# Italian translations for po package
# Traduzioni italiane per il pacchetto po.
# Copyright (C) 2023 Free Software Foundation, Inc.
# This file is distributed under the same license as the po package.
# Automatically generated, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: po 4a\n"
"POT-Creation-Date: 2023-06-11 15:28+0000\n"
"PO-Revision-Date: 2023-06-11 15:28+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/07-loops.md:1
#, no-wrap
msgid "education"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/07-loops.md:1
#, no-wrap
msgid "bash scripting"
msgstr ""

#. type: YAML Front Matter: tags
#: ../src/docs/books/learning_bash/07-loops.md:1
#, no-wrap
msgid "bash"
msgstr ""

#. type: Title #
#: ../src/docs/books/learning_bash/07-loops.md:1
#: ../src/docs/books/learning_bash/07-loops.md:12
#, no-wrap
msgid "Bash - Loops"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:17
#, no-wrap
msgid "**Objectives**: In this chapter you will learn how to:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:19
msgid ":heavy_check_mark: use loops;"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:21
msgid ":checkered_flag: **linux**, **script**, **bash**, **loops**"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:22
#, no-wrap
msgid "**Knowledge**: :star: :star:  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:23
#, no-wrap
msgid "**Complexity**: :star: :star: :star:  \n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:26
#, no-wrap
msgid "**Reading time**: 20 minutes\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:30
msgid ""
"The bash shell allows for the use of **loops**. These structures allow for "
"the execution of **a block of commands several times** (from 0 to infinity) "
"according to a statically defined value, dynamically or on condition:"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:35
msgid "`while`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:35
msgid "`until`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:35
msgid "`for`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:35
msgid "`select`"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:37
msgid ""
"Whatever the loop used, the commands to be repeated are placed **between the "
"words** `do` and `done`."
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:38
#, no-wrap
msgid "The while conditional loop structure"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:41
msgid ""
"The `while` / `do` / `done` structure evaluates the command placed after "
"`while`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:43
msgid ""
"If this command is true (`$? = 0`), the commands placed between `do` and "
"`done` are executed. The script then returns to the beginning to evaluate "
"the command again."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:45
msgid ""
"When the evaluated command is false (`$? != 0`), the shell resumes the "
"execution of the script at the first command after done."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:47
msgid "Syntax of the conditional loop structure `while`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:48
#, no-wrap
msgid ""
"while command\n"
"do\n"
"  command if $? = 0\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:56
msgid "Example using the `while` conditional structure:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:57
#, no-wrap
msgid ""
"while [[ -e /etc/passwd ]]\n"
"do\n"
"  echo \"The file exists\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:65
msgid ""
"If the evaluated command does not vary, the loop will be infinite and the "
"shell will never execute the commands placed after the script. This can be "
"intentional, but it can also be an error. So you have to be **very careful "
"with the commands that manage the loop and find a way to get out of it**."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:67
msgid ""
"To get out of a `while` loop, you have to make sure that the command being "
"evaluated is no longer true, which is not always possible."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:69
msgid "There are commands that allow you to change the behavior of a loop:"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:73
msgid "`exit`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:73
msgid "`break`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:73
msgid "`continue`"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:74
#, no-wrap
msgid "The exit command"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:77
msgid "The `exit` command ends the execution of the script."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:79
msgid "Syntax of the `exit` command :"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:80
#, no-wrap
msgid "exit [n]\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:85
msgid "Example using the `exit` command :"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:86
#, no-wrap
msgid ""
"bash # to avoid being disconnected after the \"exit 1\n"
"exit 1\n"
"echo $?\n"
"1\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:95
msgid ""
"The `exit` command ends the script immediately. It is possible to specify "
"the return code of the script by giving it as an argument (from `0` to "
"`255`).  If no argument is given, the return code of the last command of the "
"script will be passed to the `$?` variable."
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:96
#, no-wrap
msgid "The `break` / `continue` commands"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:99
msgid ""
"The `break` command allows you to interrupt the loop by going to the first "
"command after `done`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:101
msgid ""
"The `continue` command allows you to restart the loop by going back to the "
"first command after `done`."
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:102
#, no-wrap
msgid ""
"while [[ -d / ]]                                                  î² INT â î² 17s ï\n"
"do\n"
"  echo \"Do you want to continue? (yes/no)\"\n"
"  read ans\n"
"  [[ $ans = \"yes\" ]] && continue\n"
"  [[ $ans = \"no\" ]] && break\n"
"done\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:112
#, no-wrap
msgid "The `true` / `false` commands"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:115
msgid ""
"The `true` command always returns `true` while the `false` command always "
"returns `false`."
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:116
#, no-wrap
msgid ""
"true\n"
"echo $?\n"
"0\n"
"false\n"
"echo $?\n"
"1\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:126
msgid ""
"Used as a condition of a loop, they allow for either an execution of an "
"infinite loop or the deactivation of this loop."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:128
msgid "Example:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:129
#, no-wrap
msgid ""
"while true\n"
"do\n"
"  echo \"Do you want to continue? (yes/no)\"\n"
"  read ans\n"
"  [[ $ans = \"yes\" ]] && continue\n"
"  [[ $ans = \"no\" ]] && break\n"
"done\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:139
#, no-wrap
msgid "The `until` conditional loop structure"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:142
msgid ""
"The `until` / `do` / `done` structure evaluates the command placed after "
"`until`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:144
msgid ""
"If this command is false (`$? != 0`), the commands placed between `do` and "
"`done` are executed. The script then returns to the beginning to evaluate "
"the command again."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:146
msgid ""
"When the evaluated command is true (`$? = 0`), the shell resumes the "
"execution of the script at the first command after `done`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:148
msgid "Syntax of the conditional loop structure `until`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:149
#, no-wrap
msgid ""
"until command\n"
"do\n"
"  command if $? != 0\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:157
msgid "Example of the use of the conditional structure `until`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:158
#, no-wrap
msgid ""
"until [[ -e test_until ]]\n"
"do\n"
"  echo \"The file does not exist\"\n"
"  touch test_until\n"
"done\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:166
#, no-wrap
msgid "The alternative choice structure `select`"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:169
msgid ""
"The structure `select` / `do` / `done` allows for the display of a menu with "
"several choices and an input request."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:171
msgid ""
"Each item in the list has a numbered choice. When you enter a choice, the "
"value chosen is assigned to the variable placed after `select` (created for "
"this purpose)."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:173
msgid ""
"It then executes the commands placed between `do` and `done` with this value."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:176
msgid "The variable `PS3` contains the invitation to enter the choice;"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:176
msgid "The variable `REPLY` will return the number of the choice."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:178
msgid "A `break` command is needed to exit the loop."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:180
msgid "!!! Note"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:182
#, no-wrap
msgid "    The `select` structure is very useful for small and simple menus. To customize a more complete display, the `echo` and `read` commands must be used in a `while` loop.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:184
msgid "Syntax of the conditional loop structure `select`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:185
#, no-wrap
msgid ""
"PS3=\"Your choice:\"\n"
"select variable in var1 var2 var3\n"
"do\n"
"  commands\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:194
msgid "Example of the use of the conditional structure `select`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:195
#, no-wrap
msgid ""
"PS3=\"Your choice: \"\n"
"select choice in coffee tea chocolate\n"
"do\n"
"  echo \"You have chosen the $REPLY: $choice\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:204
msgid "If this script is run, it shows something like this:"
msgstr ""

#. type: Bullet: '1) '
#: ../src/docs/books/learning_bash/07-loops.md:205
msgid "Coffee"
msgstr ""

#. type: Bullet: '2) '
#: ../src/docs/books/learning_bash/07-loops.md:205
msgid "Tea"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:205
#, no-wrap
msgid ""
"3) Chocolate\n"
"Your choice : 2\n"
"You have chosen choice 2: Tea\n"
"Your choice:\n"
msgstr ""

#. type: Title ##
#: ../src/docs/books/learning_bash/07-loops.md:214
#, no-wrap
msgid "The loop structure on a list of values `for`"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:217
msgid ""
"The `for` / `do` / `done` structure assigns the first element of the list to "
"the variable placed after `for` (created on this occasion). It then executes "
"the commands placed between `do` and `done` with this value. The script then "
"returns to the beginning to assign the next element of the list to the "
"working variable. When the last element has been used, the shell resumes "
"execution at the first command after `done`."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:219
msgid "Syntax of the loop structure on list of values `for`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:220
#, no-wrap
msgid ""
"for variable in list\n"
"do\n"
"  commands\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:228
msgid "Example of using the conditional structure `for`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:229
#, no-wrap
msgid ""
"for file in /home /etc/passwd /root/fic.txt\n"
"do\n"
"  file $file\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:237
msgid ""
"Any command producing a list of values can be placed after the `in` using a "
"sub-execution."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:240
msgid ""
"With the variable `IFS` containing `$' \\t\\n'`, the `for` loop will take "
"**each word** of the result of this command as a list of elements to loop on."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/books/learning_bash/07-loops.md:240
msgid ""
"With the `IFS` variable containing `$'\\t\\n'` (i.e. without spaces), the "
"`for` loop will take each line of the result of this command."
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:242
msgid ""
"This can be the files in a directory. In this case, the variable will take "
"as a value each of the words of the file names present:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:243
#, no-wrap
msgid ""
"for file in $(ls -d /tmp/*)\n"
"do\n"
"  echo $file\n"
"done\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:251
msgid ""
"It can be a file. In this case, the variable will take as a value each word "
"contained in the file browsed, from the beginning to the end:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:252
#, no-wrap
msgid ""
"cat my_file.txt\n"
"first line\n"
"second line\n"
"third line\n"
"for LINE in $(cat my_file.txt); do echo $LINE; done\n"
"first\n"
"line\n"
"second\n"
"line\n"
"third line\n"
"line\n"
msgstr ""

#. type: Plain text
#: ../src/docs/books/learning_bash/07-loops.md:267
msgid ""
"To read a file line by line, you must modify the value of the `IFS` "
"environment variable."
msgstr ""

#. type: Fenced code block
#: ../src/docs/books/learning_bash/07-loops.md:268
#, no-wrap
msgid ""
"IFS=$'\\t\\n'\n"
"for LINE in $(cat my_file.txt); do echo $LINE; done\n"
"first line\n"
"second line\n"
"third line\n"
msgstr ""
