# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-06-13 20:27+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../src/docs/books/admin_guide/04-advanced-commands.md:43
#: ../src/docs/books/admin_guide/04-advanced-commands.md:220
#: ../src/docs/books/admin_guide/04-advanced-commands.md:271
#: ../src/docs/books/admin_guide/04-advanced-commands.md:334
#: ../src/docs/books/admin_guide/05-vi.md:70
#: ../src/docs/books/admin_guide/05-vi.md:206
#: ../src/docs/books/admin_guide/05-vi.md:272
#: ../src/docs/books/admin_guide/06-users.md:36
#: ../src/docs/books/admin_guide/06-users.md:92
#: ../src/docs/books/admin_guide/06-users.md:220
#: ../src/docs/books/admin_guide/06-users.md:350
#: ../src/docs/books/admin_guide/06-users.md:598
#: ../src/docs/books/admin_guide/06-users.md:754
#: ../src/docs/books/admin_guide/06-users.md:818
#: ../src/docs/books/admin_guide/11-tasks.md:174
#: ../src/docs/books/admin_guide/12-network.md:158
#: ../src/docs/books/admin_guide/03-commands.md:516
#: ../src/docs/books/admin_guide/03-commands.md:693
#: ../src/docs/books/admin_guide/03-commands.md:1216
#: ../src/docs/books/admin_guide/03-commands.md:1262
#: ../src/docs/books/admin_guide/03-commands.md:1297
#: ../src/docs/books/admin_guide/07-file-systems.md:395
#: ../src/docs/books/admin_guide/07-file-systems.md:437
#: ../src/docs/books/admin_guide/07-file-systems.md:447
#: ../src/docs/books/admin_guide/07-file-systems.md:515
#: ../src/docs/books/admin_guide/07-file-systems.md:556
#: ../src/docs/books/admin_guide/07-file-systems.md:627
#: ../src/docs/books/admin_guide/07-file-systems.md:653
#: ../src/docs/books/admin_guide/07-file-systems.md:672
#: ../src/docs/books/admin_guide/07-file-systems.md:676
#: ../src/docs/books/admin_guide/07-file-systems.md:1019
#: ../src/docs/books/admin_guide/08-process.md:49
#: ../src/docs/books/admin_guide/08-process.md:238
#: ../src/docs/books/admin_guide/09-backups.md:27
#: ../src/docs/books/admin_guide/09-backups.md:116
#: ../src/docs/books/admin_guide/09-backups.md:133
#: ../src/docs/books/admin_guide/09-backups.md:148
#: ../src/docs/books/admin_guide/09-backups.md:281
#: ../src/docs/books/admin_guide/09-backups.md:285
#: ../src/docs/books/admin_guide/09-backups.md:301
#: ../src/docs/books/admin_guide/09-backups.md:342
#: ../src/docs/books/admin_guide/09-backups.md:352
#: ../src/docs/books/admin_guide/09-backups.md:554
#: ../src/docs/books/admin_guide/09-backups.md:771
#: ../src/docs/books/admin_guide/10-boot.md:114
#: ../src/docs/books/admin_guide/10-boot.md:153
#: ../src/docs/books/admin_guide/10-boot.md:165
#: ../src/docs/books/admin_guide/13-softwares.md:22
#: ../src/docs/books/learning_ansible/01-basic.md:51
#: ../src/docs/books/learning_ansible/01-basic.md:104
#: ../src/docs/books/learning_ansible/01-basic.md:112
#: ../src/docs/books/learning_ansible/01-basic.md:328
#: ../src/docs/books/learning_ansible/01-basic.md:415
#: ../src/docs/books/learning_ansible/01-basic.md:492
#: ../src/docs/books/learning_ansible/01-basic.md:633
#: ../src/docs/books/learning_ansible/01-basic.md:656
#: ../src/docs/books/learning_ansible/02-advanced.md:34
#: ../src/docs/books/learning_ansible/02-advanced.md:150
#: ../src/docs/books/learning_ansible/02-advanced.md:182
#: ../src/docs/books/learning_ansible/02-advanced.md:269
#: ../src/docs/books/learning_ansible/02-advanced.md:277
#: ../src/docs/books/learning_ansible/02-advanced.md:287
#: ../src/docs/books/learning_ansible/02-advanced.md:293
#: ../src/docs/books/learning_ansible/02-advanced.md:360
#: ../src/docs/books/learning_ansible/02-advanced.md:428
#: ../src/docs/books/learning_ansible/02-advanced.md:601
#: ../src/docs/books/learning_ansible/03-working-with-files.md:33
#: ../src/docs/books/learning_ansible/03-working-with-files.md:58
#: ../src/docs/books/learning_ansible/03-working-with-files.md:77
#: ../src/docs/books/learning_ansible/03-working-with-files.md:96
#: ../src/docs/books/learning_ansible/03-working-with-files.md:113
#: ../src/docs/books/learning_ansible/04-ansible-galaxy.md:65
#: ../src/docs/books/learning_ansible/04-ansible-galaxy.md:432
#: ../src/docs/books/learning_ansible/05-deployments.md:41
#: ../src/docs/books/learning_ansible/05-deployments.md:124
#: ../src/docs/books/learning_ansible/05-deployments.md:196
#: ../src/docs/books/learning_ansible/05-deployments.md:616
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:36
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:40
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:80
#: ../src/docs/books/learning_ansible/06-large-scale-infrastructure.md:214
#: ../src/docs/books/learning_ansible/07-working-with-filters.md:32
#: ../src/docs/books/learning_ansible/07-working-with-filters.md:75
#: ../src/docs/books/learning_bash/02-using-variables.md:153
#: ../src/docs/books/learning_bash/02-using-variables.md:193
#: ../src/docs/books/learning_bash/05-tests.md:245
#: ../src/docs/books/learning_bash/07-loops.md:180
#: ../src/docs/books/lxd_server/04-firewall.md:80
#: ../src/docs/books/nvchad/plugins/md_preview.md:140
#: ../src/docs/books/nvchad/template_chadrc.md:239
#: ../src/docs/gemstones/https_rsa_keygen.md:34
#: ../src/docs/gemstones/systemd_service_for_python_script.md:80
#: ../src/docs/guides/8_6_installation.md:37
#: ../src/docs/guides/8_6_installation.md:168
#: ../src/docs/guides/8_6_installation.md:176
#: ../src/docs/guides/8_6_installation.md:182
#: ../src/docs/guides/8_6_installation.md:250
#: ../src/docs/guides/automation/olivetin.md:60
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:307
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:323
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:486
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:533
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:667
#: ../src/docs/guides/containers/lxd_web_servers.md:35
#: ../src/docs/guides/containers/lxd_web_servers.md:45
#: ../src/docs/guides/containers/lxd_web_servers.md:301
#: ../src/docs/guides/containers/lxd_web_servers.md:352
#: ../src/docs/guides/containers/lxd_web_servers.md:605
#: ../src/docs/guides/containers/lxd_web_servers.md:665
#: ../src/docs/guides/containers/lxd_web_servers.md:737
#: ../src/docs/guides/containers/lxd_web_servers.md:796
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:53
#: ../src/docs/guides/contribute/navigation.md:60
#: ../src/docs/guides/custom-linux-kernel.md:453
#: ../src/docs/guides/editors/micro.md:30
#: ../src/docs/guides/file_sharing/glusterfs.md:46
#: ../src/docs/guides/file_sharing/glusterfs.md:64
#: ../src/docs/guides/file_sharing/glusterfs.md:102
#: ../src/docs/guides/file_sharing/glusterfs.md:203
#: ../src/docs/guides/installation.md:36 ../src/docs/guides/installation.md:175
#: ../src/docs/guides/installation.md:183
#: ../src/docs/guides/installation.md:193
#: ../src/docs/guides/installation.md:266
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:71
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:31
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:126
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:253
#: ../src/docs/guides/security/firewalld-beginners.md:89
#: ../src/docs/guides/security/firewalld-beginners.md:144
#: ../src/docs/guides/security/firewalld-beginners.md:258
#: ../src/docs/guides/security/firewalld.md:51
#: ../src/docs/guides/security/firewalld.md:94
#: ../src/docs/guides/security/firewalld.md:228
#: ../src/docs/guides/security/firewalld.md:372
#: ../src/docs/guides/security/generating_ssl_keys_lets_encrypt.md:72
#: ../src/docs/guides/security/learning_selinux.md:137
#: ../src/docs/guides/security/learning_selinux.md:253
#: ../src/docs/guides/security/learning_selinux.md:356
#: ../src/docs/guides/virtualization/vbox-rocky.md:27
#: ../src/docs/guides/web/nginx-mainline.md:30
#: ../src/docs/guides/web/nginx-mainline.md:99
#: ../src/docs/guides/web/nginx-mainline.md:141
#: ../src/docs/guides/web/nginx-mainline.md:254
#: ../src/docs/guides/web/nginx-mainline.md:333
#: ../src/docs/guides/web/nginx-multisite.md:73
#: ../src/docs/guides/web/nginx-multisite.md:233
#: ../src/docs/guides/web/nginx-multisite.md:292
#: ../src/docs/guides/web/nginx-multisite.md:302
#: ../src/docs/guides/web/php.md:33 ../src/docs/guides/web/php.md:76
#: ../src/docs/guides/web/php.md:181 ../src/docs/guides/web/php.md:230
#: ../src/docs/guides/web/php.md:271 ../src/docs/guides/web/php.md:467
#: ../src/docs/guides/web/php.md:471 ../src/docs/release_notes/9_2.md:26
msgid "!!! Note"
msgstr ""

#. type: Title #
#: ../src/docs/books/disa_stig/disa_stig_part2.md:13
#: ../src/docs/books/disa_stig/disa_stig_part1.md:23
#: ../src/docs/books/learning_ansible/05-deployments.md:31
#: ../src/docs/books/learning_bash/appendix/02-variables-logs.md:14
#: ../src/docs/books/lxd_server/00-toc.md:1
#: ../src/docs/books/lxd_server/00-toc.md:13
#: ../src/docs/books/nvchad/index.md:12
#: ../src/docs/books/nvchad/plugins/index.md:14
#: ../src/docs/books/nvchad/plugins/md_preview.md:14
#: ../src/docs/books/nvchad/plugins/projectmgr.md:14
#: ../src/docs/books/nvchad/vale_nvchad.md:12
#: ../src/docs/gemstones/dnf-swap.md:18 ../src/docs/gemstones/docker.md:10
#: ../src/docs/gemstones/nmtui.md:8 ../src/docs/gemstones/setup_local_repo.md:8
#: ../src/docs/gemstones/string_color.md:11
#: ../src/docs/guides/automation/cron_jobs_howto.md:25
#: ../src/docs/guides/automation/olivetin.md:14
#: ../src/docs/guides/automation/templates-automation-packer-vsphere.md:25
#: ../src/docs/guides/backup/mirroring_lsyncd.md:26
#: ../src/docs/guides/backup/rsnapshot_backup.md:22
#: ../src/docs/guides/backup/rsync_ssh.md:24
#: ../src/docs/guides/cms/cloud_server_using_nextcloud.md:28
#: ../src/docs/guides/cms/dokuwiki_server.md:23
#: ../src/docs/guides/containers/lxd_web_servers.md:10
#: ../src/docs/guides/containers/podman-nextcloud.md:13
#: ../src/docs/guides/contribute/local_docs.md:11
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:11
#: ../src/docs/guides/contribute/mkdocs_venv.md:14
#: ../src/docs/guides/contribute/style_guide.md:14
#: ../src/docs/guides/database/database_mariadb-server.md:21
#: ../src/docs/guides/desktop/kde_installation.md:11
#: ../src/docs/guides/dns/private_dns_server_using_bind.md:22
#: ../src/docs/guides/editors/micro.md:14
#: ../src/docs/guides/email/postfix_reporting.md:22
#: ../src/docs/guides/file_sharing/glusterfs.md:16
#: ../src/docs/guides/file_sharing/secure_ftp_server_vsftpd.md:21
#: ../src/docs/guides/file_sharing/sftp.md:16
#: ../src/docs/guides/migrate2rocky.md:18
#: ../src/docs/guides/network/basic_network_configuration.md:12
#: ../src/docs/guides/network/librenms_monitoring_server.md:13
#: ../src/docs/guides/package_management/index.md:1
#: ../src/docs/guides/package_management/index.md:5
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:9
#: ../src/docs/guides/proxies/pound.md:17
#: ../src/docs/guides/security/authentication/active_directory_authentication.md:13
#: ../src/docs/guides/security/enabling_iptables_firewall.md:22
#: ../src/docs/guides/security/firewalld-beginners.md:10
#: ../src/docs/guides/security/generating_ssl_keys_lets_encrypt.md:23
#: ../src/docs/guides/security/ssh_public_private_keys.md:21
#: ../src/docs/guides/security/ssl_keys_https.md:22
#: ../src/docs/guides/virtualization/vbox-rocky.md:13
#: ../src/docs/guides/web/apache-sites-enabled.md:25
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:23
#: ../src/docs/guides/web/apache_hardened_webserver/modsecurity.md:24
#: ../src/docs/guides/web/apache_hardened_webserver/ossec-hids.md:22
#: ../src/docs/guides/web/apache_hardened_webserver/rkhunter.md:23
#: ../src/docs/guides/web/nginx-mainline.md:13
#: ../src/docs/guides/web/nginx-multisite.md:14
#: ../src/docs/labs/security/introduction.md:1
#: ../src/docs/labs/security/introduction.md:5
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Title ##
#: ../src/docs/books/lxd_server/00-toc.md:48 ../src/docs/gemstones/rpaste.md:76
#: ../src/docs/guides/automation/cron_jobs_howto.md:185
#: ../src/docs/guides/backup/rsync_ssh.md:161
#: ../src/docs/guides/cms/cloud_server_using_nextcloud.md:322
#: ../src/docs/guides/dns/private_dns_server_using_bind.md:632
#: ../src/docs/guides/file_sharing/glusterfs.md:339
#: ../src/docs/guides/network/librenms_monitoring_server.md:657
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:480
#: ../src/docs/guides/security/generating_ssl_keys_lets_encrypt.md:339
#, no-wrap
msgid "Conclusions"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/cms/dokuwiki_server.md:148
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:415
msgid "`sudo vi /etc/hosts`"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/containers/podman-nextcloud.md:35
#: ../src/docs/guides/contribute/mkdocs_lsyncd.md:19
#: ../src/docs/guides/dns/private_dns_server_using_bind.md:13
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:19
#: ../src/docs/guides/proxies/pound.md:27
#: ../src/docs/guides/security/firewalld-beginners.md:36
#: ../src/docs/guides/security/firewalld.md:25
#: ../src/docs/guides/security/pam.md:13
#: ../src/docs/guides/web/apache_hardened_webserver/index.md:14
#: ../src/docs/guides/web/nginx-mainline.md:41
#: ../src/docs/guides/web/nginx-multisite.md:28
#, no-wrap
msgid "Prerequisites and Assumptions"
msgstr ""

#. type: YAML Front Matter: title
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:1
#, no-wrap
msgid "HAProxy-Apache-LXD"
msgstr ""

#. type: Title #
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:7
#, no-wrap
msgid "HAProxy Load Balancing Apache using LXD Containers"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:12
msgid ""
"HAProxy stands for \"High Availability Proxy.\" This proxy can sit in front "
"of any TCP application (such as web servers), but it is often used to act as "
"a load-balancer between multiple instances of a website."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:14
msgid ""
"There might be a number of reasons for doing this. If you have a website "
"that is being hit hard — adding another instance of that same website and "
"placing HAProxy in front of both — allows you to distribute traffic between "
"instances. Another reason might be to be able to update content on a website "
"without any down time. HAProxy can also help mitigate DOS and DDOS attacks."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:16
msgid ""
"This guide is going to explore using HAProxy using two website instances, "
"and load-balancing with round robin rotation, on the same LXD host. This "
"might be a perfectly fine solution for ensuring that updates can be "
"performed without downtime."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:18
msgid ""
"If your problem is website performance, however, you may need to distribute "
"your multiple sites across actual bare metal or between multiple LXD hosts. "
"It is certainly possible to do all of this on bare metal without using LXD "
"at all, however LXD offers great flexibility and performance, plus it is "
"great to use for lab testing."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid "Complete comfort at the command line on a Linux machine"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid "Experience with a command line editor (we are using `vim` here)"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid "Experience with `crontab`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid ""
"Knowledge of LXD. For more information, you may want to consult the [LXD "
"Server](../../books/lxd_server/00-toc.md) document. It is perfectly fine to "
"install LXD on a laptop or workstation as well without doing the full-blown "
"server install. This document is being written with a lab machine that is "
"running LXD, but is not set up as a full server as the document linked above "
"uses."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid "Some knowledge on installing, configuring, and using web servers."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:27
msgid ""
"We will assume that LXD is already installed and ready to create containers."
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:28
#, no-wrap
msgid "Installing Containers"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:31
msgid ""
"On your LXD host for this guide, we will need three containers. Obviously, "
"there could be more web server containers if you wish. We will use **web1** "
"and **web2** for our website containers and **proxyha** for our HAProxy "
"container. To install these on your LXD host do:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:32
#, no-wrap
msgid ""
"lxc launch images:rockylinux/8 web1\n"
"lxc launch images:rockylinux/8 web2\n"
"lxc launch images:rockylinux/8 proxyha\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:38
msgid "Running an `lxc list` should return something like this:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:39
#, no-wrap
msgid ""
"+---------+---------+----------------------+------+-----------+-----------+\n"
"|  NAME   |  STATE  |         IPV4         | IPV6 |   TYPE    | SNAPSHOTS |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| proxyha | RUNNING | 10.181.87.137 (eth0) |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| web1    | RUNNING | 10.181.87.207 (eth0) |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| web2    | RUNNING | 10.181.87.34 (eth0)  |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:51
#, no-wrap
msgid "Creating and Using the `macvlan` Profile"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:54
msgid ""
"The containers are currently running on the default bridge interface with "
"bridge assigned DHCP addresses. We are going to want to use DHCP addresses "
"from our local LAN, so the first thing we need to do is to create and assign "
"the `macvlan` profile."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:56
msgid "Start by creating the profile:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:58
msgid "`lxc profile create macvlan`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:60
msgid ""
"Make sure that your editor is set to your preferred editor, in this case "
"`vim`:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:62
msgid "`export EDITOR=/usr/bin/vim`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:64
msgid ""
"Next we need to modify the `macvlan` profile. But before we do, we need to "
"know what interface the host is using for our LAN so run `ip addr` and look "
"for the interface with the LAN IP assignment:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:65
#, no-wrap
msgid ""
"2: eno1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000\n"
"    link/ether a8:5e:45:52:f8:b6 brd ff:ff:ff:ff:ff:ff\n"
"    inet 192.168.1.141/24 brd 192.168.1.255 scope global dynamic noprefixroute eno1\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:73
#, no-wrap
msgid "    In this case, the interface we are looking for is \"eno1\" but this could be completely different on your system. Use **your** interface information!\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:75
msgid ""
"Now that we know the LAN interface, we can modify our `macvlan` profile. To "
"do this, at the command line type:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:77
msgid "`lxc profile edit macvlan`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:79
msgid ""
"We need to make our profile look something like this. We've excluded the "
"comments at the top of the file, but if you are new to LXD, take a look at "
"those:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:80
#, no-wrap
msgid ""
"config: {}\n"
"description: \"\"\n"
"devices:\n"
"  eth0:\n"
"    name: eth0\n"
"    nictype: macvlan\n"
"    parent: eno1\n"
"    type: nic\n"
"name: macvlan\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:93
msgid ""
"What happened when we created the `macvlan` profile is that the `default` "
"profile was copied. The `default` profile cannot be changed."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:95
msgid ""
"Now that we have the `macvlan` profile, we need to apply it to our three "
"containers:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:96
#, no-wrap
msgid ""
"lxc profile assign web1 default,macvlan\n"
"lxc profile assign web2 default,macvlan\n"
"lxc profile assign proxyha default,macvlan\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:103
msgid ""
"Unfortunately, the default behavior of `macvlan` as implemented in the "
"kernel, is inexplicably broken within an LXD container (see [this document]"
"(../../books/lxd_server/06-profiles.md)) `dhclient` on boot in each of the "
"containers."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:105
msgid ""
"Doing this is pretty simple when using DHCP. Just follow this for each "
"container:"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid ""
"`lxc exec web1 bash` which will put you at the command line of the **web1** "
"container"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "`crontab -e` which will edit root's `crontab` on the container"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "type `i` to get into insert mode."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "add a line: `@reboot /usr/sbin/dhclient`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "hit the `ESC` key to exit out of insert mode."
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "save your changes with `SHIFT: wq`"
msgstr ""

#. type: Bullet: '* '
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:113
msgid "type `exit` to exit container"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:115
msgid "Repeat steps for **web2** and **proxyha**."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:117
msgid "Once these steps are completed, restart the containers:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:118
#, no-wrap
msgid ""
"lxc restart web1\n"
"lxc restart web2\n"
"lxc restart proxyha\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:125
msgid ""
"and when you do an `lxc list` again, you should see that the DHCP addresses "
"are now assigned from your LAN:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:126
#, no-wrap
msgid ""
"+---------+---------+----------------------+------+-----------+-----------+\n"
"|  NAME   |  STATE  |         IPV4         | IPV6 |   TYPE    | SNAPSHOTS |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| proxyha | RUNNING | 192.168.1.149 (eth0) |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| web1    | RUNNING | 192.168.1.150 (eth0) |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
"| web2    | RUNNING | 192.168.1.101 (eth0) |      | CONTAINER | 0         |\n"
"+---------+---------+----------------------+------+-----------+-----------+\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:138
#, no-wrap
msgid "Installing Apache and Modifying the Welcome Screen"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:141
msgid ""
"Now that our environment is set, we need to install Apache (`httpd`) on each "
"web container. This can done without physically accessing them:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:142
#, no-wrap
msgid ""
"lxc exec web1 dnf install httpd\n"
"lxc exec web2 dnf install httpd\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:147
msgid ""
"While it is understood that you will need a whole lot more than Apache for "
"any modern web server, this is enough to run some tests."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:149
msgid ""
"Next, we need to enable `httpd`, start it, and then modify the default "
"welcome screen, so we know which server we are hitting when we attempt to "
"access via proxy."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:151
msgid "Enable and start `httpd`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:152
#, no-wrap
msgid ""
"lxc exec web1 systemctl enable httpd\n"
"lxc exec web1 systemctl start httpd\n"
"lxc exec web2 systemctl enable httpd\n"
"lxc exec web2 systemctl start httpd\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:160
msgid ""
"Now that we have `httpd` enabled and started, let's modify the welcome "
"screen. This is the screen that comes up when there is no website "
"configured, essentially a default page that loads. In Rocky Linux, this page "
"is located here `/usr/share/httpd/noindex/index.html`. To modify that file, "
"again, there's no need for direct access to the container. Simply do the "
"following:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:162
msgid "`lxc exec web1 vi /usr/share/httpd/noindex/index.html`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:164
#, no-wrap
msgid "and then do a search for the `<h1>` tag, which should show this:\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:166
#, no-wrap
msgid "`<h1>HTTP Server <strong>Test Page</strong></h1>`\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:168
msgid "Simply change that line to read:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:170
#, no-wrap
msgid "`<h1>SITE1 HTTP Server <strong>Test Page</strong></h1>`\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:172
msgid ""
"Now repeat the process for web2. Going to these machines by IP in a browser "
"should now return the correct welcome page for each. There's more to do on "
"the web servers, but let's leave them and go on to the proxy server next."
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:173
#, no-wrap
msgid "Installing HAProxy on proxyha and LXD Proxy Configuration"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:176
msgid ""
"It is just as easy to install HAProxy on the proxy container as well. Again, "
"no need to access that container directly:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:178
msgid "`lxc exec proxyha dnf install haproxy`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:180
msgid ""
"The next thing we want to do is configure `haproxy` to listen on port 80 and "
"port 443 for the web services. This is done with the configure sub-command "
"of `lxc`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:180
#, no-wrap
msgid ""
"lxc config device add proxyha http proxy listen=tcp:0.0.0.0:80 connect=tcp:127.0.0.1:80\n"
"lxc config device add proxyha https proxy listen=tcp:0.0.0.0:443 connect=tcp:127.0.0.1:443\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:186
msgid ""
"For our testing, we are only going to use port 80, or HTTP traffic, but this "
"shows you how you would configure the container to listen on the default web "
"ports for both HTTP and HTTPS. Using this command also ensures that "
"restarting the **proxyha** container will maintain those listening ports."
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:187
#, no-wrap
msgid "The HAProxy Configuration"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:190
msgid ""
"We've already installed HAProxy on the container, but we have done nothing "
"with the configuration. Before we do anything, we need to do something to "
"resolve our hosts. Normally we would be using fully-qualified domain names, "
"but in this lab environment, we are just using IPs. To get some names "
"associated with the machines, we are going to add some host file records to "
"the **proxyha** container."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:192
msgid "`lxc exec proxyha vi /etc/hosts`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:194
msgid "Add the following records to the bottom of the file:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:195
#, no-wrap
msgid ""
"192.168.1.150   site1.testdomain.com     site1\n"
"192.168.1.101   site2.testdomain.com     site2\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:201
msgid "Which should allow the **proxyha** container to resolve those names."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:203
msgid ""
"Once that is complete, let's edit the `haproxy.cfg` file. There is so much "
"in the original file that we are not going to be using, that we are simply "
"going to make a backup of it first by moving it to a different name:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:205
msgid ""
"`lxc exec proxyha mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.orig`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:207
msgid "Now let's create a new configuration file:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:209
msgid "`lxc exec proxyha vi /etc/haproxy/haproxy.cfg`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:211
msgid ""
"Note that we have commented out all of the HTTPS protocol lines for now. In "
"a production environment, you'd want to use a wildcard certificate that "
"would cover your web servers and enable HTTPS:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:212
#, no-wrap
msgid ""
"global\n"
"log /dev/log local0\n"
"log /dev/log local1 notice\n"
"chroot /var/lib/haproxy\n"
"stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n"
"stats timeout 30s\n"
"user haproxy\n"
"group haproxy\n"
"daemon\n"
"\n"
"# For now, all https is remarked out\n"
"#\n"
"#ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets\n"
"#ssl-default-bind-ciphers EECDH+AESGCM:EDH+AESGCM\n"
"#tune.ssl.default-dh-param 2048\n"
"\n"
"defaults\n"
"log global\n"
"mode http\n"
"option httplog\n"
"option dontlognull\n"
"option forwardfor\n"
"option http-server-close\n"
"timeout connect 5000\n"
"timeout client 50000\n"
"timeout server 50000\n"
"errorfile 400 /etc/haproxy/errors/400.http\n"
"errorfile 403 /etc/haproxy/errors/403.http\n"
"errorfile 408 /etc/haproxy/errors/408.http\n"
"errorfile 500 /etc/haproxy/errors/500.http\n"
"errorfile 502 /etc/haproxy/errors/502.http\n"
"errorfile 503 /etc/haproxy/errors/503.http\n"
"errorfile 504 /etc/haproxy/errors/504.http\n"
"\n"
"# For now, all https is remarked out\n"
"# frontend www-https\n"
"# bind *:443 ssl crt /etc/letsencrypt/live/example.com/example.com.pem\n"
"# reqadd X-Forwarded-Proto:\\ https\n"
"\n"
"# acl host_web1 hdr(host) -i site1.testdomain.com\n"
"# acl host_web2 hdr(host) -i site2.testdomain.com\n"
"\n"
"# use_backend subdomain1 if host_web1\n"
"# use_backend subdomain2 if host_web2\n"
"\n"
"frontend http_frontend\n"
"bind *:80\n"
"\n"
"acl web_host1 hdr(host) -i site1.testdomain.com\n"
"acl web_host2 hdr(host) -i site2.testdomain.com\n"
"\n"
"use_backend subdomain1 if web_host1\n"
"use_backend subdomain2 if web_host2\n"
"\n"
"backend subdomain1\n"
"# balance leastconn\n"
"  balance roundrobin\n"
"  http-request set-header X-Client-IP %[src]\n"
"# redirect scheme https if !{ ssl_fc }\n"
"     server site1 site1.testdomain.com:80 check\n"
"     server site2 web2.testdomain.com:80 check\n"
"\n"
"backend subdomain2\n"
"# balance leastconn\n"
"  balance roundrobin\n"
"  http-request set-header X-Client-IP %[src]\n"
"# redirect scheme https if !{ ssl_fc }\n"
"     server site2 site2.testdomain.com:80 check\n"
"     server site1 site1.testdomain.com:80 check\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:285
msgid ""
"A little explanation of what's going on above. You should see this in your "
"testing, when you get to the testing section of this guide (below):"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:287
msgid ""
"Both **site1** and **site2** are defined in the \"acl\" section. Then both "
"**site1** and **site2** are included in each other's \"roundrobin\" for "
"their respective back ends. What happens when you go to site1.testdomain.com "
"in the test, the URL does not change, but the page inside will switch each "
"time you access the page from the **site1** to the **site2** test pages. "
"Same goes for site2.testdomain.com."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:289
msgid ""
"This is done to show you the switch is occurring, but in reality, your "
"website content will look exactly the same regardless of which server you "
"are hitting. Keep in mind that we are showing how you might want to "
"distribute traffic between multiple hosts. You can also use \"leastcon\" in "
"the balance line, and instead of switching based on the previous hit, it "
"will load the site with the least number of connections."
msgstr ""

#. type: Title ###
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:290
#, no-wrap
msgid "The Error Files"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:293
msgid ""
"Some versions of HAProxy come with a standard set of web error files, "
"however the version that comes from Rocky Linux (and the upstream vendor), "
"does not have these files. You probably **do** want to create them, as they "
"may help you troubleshoot any problems. These files go in the directory `/"
"etc/haproxy/errors` which does not exist."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:295
msgid "The first thing we need to do is create that directory:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:297
msgid "`lxc exec proxyha mkdir /etc/haproxy/errors`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:299
msgid ""
"Then we need to create each of these files in that directory. Note that you "
"can do this with each filename from your LXD host with the command `lxc exec "
"proxyha vi /etc/haproxy/errors/filename.http`, where \"filename.http\" "
"references one of the below file names. In a production environment, your "
"company may have more specific errors that they would like to use:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:301
msgid "File name `400.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:302
#, no-wrap
msgid ""
"HTTP/1.0 400 Bad request\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>400 Bad request</h1>\n"
"Your browser sent an invalid request.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:314
msgid "File name `403.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:315
#, no-wrap
msgid ""
"HTTP/1.0 403 Forbidden\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>403 Forbidden</h1>\n"
"Request forbidden by administrative rules.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:327
msgid "Filename `408.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:328
#, no-wrap
msgid ""
"HTTP/1.0 408 Request Time-out\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>408 Request Time-out</h1>\n"
"Your browser didn't send a complete request in time.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:340
msgid "Filename `500.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:341
#, no-wrap
msgid ""
"HTTP/1.0 500 Internal Server Error\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>500 Internal Server Error</h1>\n"
"An internal server error occurred.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:353
msgid "Filename `502.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:354
#, no-wrap
msgid ""
"HTTP/1.0 502 Bad Gateway\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>502 Bad Gateway</h1>\n"
"The server returned an invalid or incomplete response.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:366
msgid "Filename `503.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:367
#, no-wrap
msgid ""
"HTTP/1.0 503 Service Unavailable\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>503 Service Unavailable</h1>\n"
"No server is available to handle this request.\n"
"</body></html>\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:379
msgid "Filename `504.http`:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:380
#, no-wrap
msgid ""
"HTTP/1.0 504 Gateway Time-out\n"
"Cache-Control: no-cache\n"
"Connection: close\n"
"Content-Type: text/html\n"
"\n"
"<html><body><h1>504 Gateway Time-out</h1>\n"
"The server didn't respond in time.\n"
"</body></html>\n"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:391
#, no-wrap
msgid "Running The Proxy"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:394
msgid ""
"We need to create a \"run\" directory for `haproxy` before we start the "
"service:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:396
msgid "`lxc exec proxyha mkdir /run/haproxy`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:398
msgid "Next, we need to enable the service and start it:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:398
#, no-wrap
msgid ""
"lxc exec proxyha systemctl enable haproxy\n"
"lxc exec proxyha systemctl start haproxy\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:403
msgid "If you get any errors, research the reason by using:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:405
msgid "`lxc exec proxyha systemctl status haproxy`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:407
msgid ""
"If everything starts and runs without issue, we are ready to move on to "
"testing."
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:408
#, no-wrap
msgid "Testing The Proxy"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:411
msgid ""
"As with the hosts (`/etc/hosts`) setup that we used so that our **proxyha** "
"container can resolve the web servers, and since in our lab environment we "
"don't have a local DNS server running, we need to set the IP values on our "
"local machine for both the site1 and site2 websites, to correspond to our "
"haproxy container."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:413
msgid ""
"To do this, we need to modify our `/etc/hosts` file on our local machine. "
"Consider this method of domain resolution a \"poor man's DNS.\""
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:417
msgid "Then just add these two lines:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:418
#, no-wrap
msgid ""
"192.168.1.149   site1.testdomain.com     site1\n"
"192.168.1.149   site2.testdomain.com     site2\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:424
msgid ""
"If you ping either **site1** or **site2** on your local machine now, you "
"should get a response from **proxyha**:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:425
#, no-wrap
msgid ""
"PING site1.testdomain.com (192.168.1.149) 56(84) bytes of data.\n"
"64 bytes from site1.testdomain.com (192.168.1.149): icmp_seq=1 ttl=64 time=0.427 ms\n"
"64 bytes from site1.testdomain.com (192.168.1.149): icmp_seq=2 ttl=64 time=0.430 ms\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:432
msgid ""
"Now open your web browser and type site1.testdomain.com (or site2.testdomain."
"com) as the URL in the address bar. You should get a response back from one "
"of the two test pages and if you load the page again, you should get the "
"next server's test page. Note that the URL does not change, but the returned "
"page will change alternately between servers."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:435
msgid ""
"![screenshot of web1 being loaded and showing the second server test message]"
"(../images/haproxy_apache_lxd.png)"
msgstr ""

#. type: Title ##
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:436
#, no-wrap
msgid "Logging"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:439
msgid ""
"Even though our configuration file is set up correctly for logging, we need "
"two things: First, we need a directory in /var/lib/haproxy/ called \"dev\":"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:441
msgid "`lxc exec proxyha mkdir /var/lib/haproxy/dev`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:443
msgid ""
"Next, we need to create a system process for `rsyslogd` to grab instances "
"from the socket (`/var/lib/haproxy/dev/log` in this case) and store those in "
"`/var/log/haproxy.log`:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:445
msgid "`lxc exec proxyha vi /etc/rsyslog.d/99-haproxy.conf`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:447
msgid "Add the following contents to that file:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:448
#, no-wrap
msgid ""
"$AddUnixListenSocket /var/lib/haproxy/dev/log\n"
"\n"
"# Send HAProxy messages to a dedicated logfile\n"
":programname, startswith, \"haproxy\" {\n"
"  /var/log/haproxy.log\n"
"  stop\n"
"}\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:458
msgid "Save the file and exit, then restart `rsyslog`:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:460
msgid "`lxc exec proxyha systemctl restart rsyslog`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:462
msgid ""
"And to populate that log file with something right away, restart `haproxy` "
"again:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:464
msgid "`lxc exec proxyha systemctl restart haproxy`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:466
msgid "To take a look at the log file created:"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:468
msgid "`lxc exec proxyha more /var/log/haproxy.log`"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:470
msgid "Which should show you something like this:"
msgstr ""

#. type: Fenced code block
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:471
#, no-wrap
msgid ""
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy http_frontend started.\n"
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy http_frontend started.\n"
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy subdomain1 started.\n"
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy subdomain1 started.\n"
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy subdomain2 started.\n"
"Sep 25 23:18:02 proxyha haproxy[4602]: Proxy subdomain2 started.\n"
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:483
msgid ""
"HAProxy is a powerful proxy engine that can be used for many things. It is a "
"high-performance, open-source load balancer and reverse proxy for TCP and "
"HTTP applications. We have shown in this document how to use load balancing "
"of two web server instances."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:485
msgid ""
"It can also be used for other applications, including databases. It works "
"within LXD containers, as well as on bare metal and standalone servers."
msgstr ""

#. type: Plain text
#: ../src/docs/guides/proxies/haproxy_apache_lxd.md:486
msgid ""
"There are plenty of uses not covered in this document. Check out the "
"[official manual for HAProxy here.](https://cbonte.github.io/haproxy-"
"dconv/1.8/configuration.html)"
msgstr ""
